{
  "address": "0x82B4050d360259812dbBe0c0E15861e57E5e468A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_BALANCETRANSFERFAILED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UPKEEPNOTNEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NOTENOUGHETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RAFFLENOTOPEN",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "theWinner",
          "type": "address"
        }
      ],
      "name": "randomWinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedRaffleWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2de7b7f6e7d37372bd0f3825bb724bebf79e7cbab4f6bc19f59a8fa919c2af71",
  "receipt": {
    "to": null,
    "from": "0x016b35B5dD1AB31eFF6BDBC42631B0463D6F36EF",
    "contractAddress": "0x82B4050d360259812dbBe0c0E15861e57E5e468A",
    "transactionIndex": 84,
    "gasUsed": "1313487",
    "logsBloom": "0x
    "blockHash": "0xbde4d71f46ff58e233d8359912a41fcc93ce43a6edcd6236acdad848c4f50640",
    "transactionHash": "0x2de7b7f6e7d37372bd0f3825bb724bebf79e7cbab4f6bc19f59a8fa919c2af71",
    "logs": [],
    "blockNumber": 5184466,
    "cumulativeGasUsed": "11444849",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "6926",
    "50000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "94cb322d24d916990b7eb49de3f7d4b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_BALANCETRANSFERFAILED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UPKEEPNOTNEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NOTENOUGHETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RAFFLENOTOPEN\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"theWinner\",\"type\":\"address\"}],\"name\":\"randomWinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedRaffleWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  ^0.8.7;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\n error Raffle__NOTENOUGHETH();\\r\\n error Raffle_BALANCETRANSFERFAILED();\\r\\n  error Raffle__RAFFLENOTOPEN();\\r\\n  error Raffle_UPKEEPNOTNEEDED(uint256 currentBalance, uint256 players, uint256 raffleState);\\r\\n  \\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatible{\\r\\n   // Type declaration\\r\\n    enum RaffleState {OPEN, CALCULATING }\\r\\n\\r\\n\\r\\n uint256 private  immutable i_entranceFee;\\r\\n address payable[] public s_players;\\r\\n VRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\r\\n bytes32 private immutable i_gasLane;\\r\\n uint64 private immutable  i_subscriptionId;\\r\\n uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n uint32  private immutable i_callbackGasLimit;\\r\\n uint32 private constant NUM_WORDS =1;\\r\\n uint256 private s_lastTimeStamp;\\r\\n uint256 private immutable i_interval;\\r\\n RaffleState private s_raffleState;\\r\\n\\r\\n /*  events */\\r\\n  event raffleEnter(address indexed player);\\r\\n  event requestedRaffleWinner(uint256 indexed requestId);\\r\\n  event randomWinnerPicked(address indexed theWinner);\\r\\n  //state variables\\r\\n  address private s_recentWinner;\\r\\n\\r\\n constructor  (address vrfCoordinatorV2,  uint256 entranceFee,  bytes32 gasLane, uint64 subscriptionId, uint32 callbackGasLimit, uint256 interval ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n    i_entranceFee = entranceFee;\\r\\n    i_vrfCoordinator  = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n    i_gasLane = gasLane;\\r\\n    i_subscriptionId = subscriptionId;\\r\\n    i_callbackGasLimit = callbackGasLimit;\\r\\n    s_raffleState = RaffleState.OPEN;\\r\\n    s_lastTimeStamp = block.timestamp;\\r\\n    i_interval = interval;\\r\\n   \\r\\n\\r\\n}\\r\\n   function enterRaffle() public payable {\\r\\n    if(msg.value < i_entranceFee){\\r\\n       revert Raffle__NOTENOUGHETH(); \\r\\n    }\\r\\n    if (s_raffleState != RaffleState.OPEN) {\\r\\n      revert Raffle__RAFFLENOTOPEN();\\r\\n    } \\r\\n    s_players.push(payable(msg.sender));\\r\\n    emit raffleEnter(msg.sender);\\r\\n }\\r\\n function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen =  (RaffleState.OPEN == s_raffleState);\\r\\n        bool hasPlayers  = s_players.length > 0;\\r\\n        bool hasBalance  =  address (this).balance > 0 ;\\r\\n        bool timeIsValid  = ((block.timestamp - s_lastTimeStamp) > i_interval );\\r\\n        upkeepNeeded = (isOpen && hasPlayers && hasBalance && timeIsValid);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n  function performUpkeep(bytes calldata /* performData */) external override {\\r\\n  (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n  if (!upkeepNeeded) {\\r\\n        revert Raffle_UPKEEPNOTNEEDED(address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_raffleState));\\r\\n  }\\r\\n   s_raffleState = RaffleState.CALCULATING;\\r\\n      uint256 requestId =   i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit requestedRaffleWinner(requestId);\\r\\n        \\r\\n\\r\\n\\r\\n }\\r\\n function fulfillRandomWords(  uint256, /*_requestId*/ uint256[] memory _randomWords ) internal override{\\r\\n     uint256 indexOfWinner = _randomWords[0] % s_players.length;\\r\\n     address payable addressOfWinner  = s_players[indexOfWinner];\\r\\n     s_recentWinner = addressOfWinner;\\r\\n     s_players = new address payable[](0);\\r\\n     s_raffleState = RaffleState.OPEN;\\r\\n     s_lastTimeStamp =  block.timestamp;\\r\\n     \\r\\n       (bool success, ) = addressOfWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n       if (!success) {\\r\\n         revert Raffle_BALANCETRANSFERFAILED();\\r\\n       } \\r\\n    emit randomWinnerPicked(addressOfWinner);\\r\\n }\\r\\n\\r\\n function getEntranceFee() public view returns(uint256) {\\r\\n    return i_entranceFee;\\r\\n }\\r\\n function getPlayers(uint256 index) public view returns(address) {\\r\\n    return s_players[index];\\r\\n }\\r\\n function getRecentWinner() public view returns (address) {\\r\\n   return s_recentWinner;\\r\\n }\\r\\n function getRaffleState() public view returns (RaffleState) {\\r\\n   return s_raffleState;\\r\\n }\\r\\n function getNumWords() public pure returns (uint32) {\\r\\n   return NUM_WORDS;\\r\\n }\\r\\n function getNumberOfPlayers () public view returns(uint256){\\r\\n   return s_players.length;\\r\\n }\\r\\n function getRequestConfirmations () public pure returns(uint256){\\r\\n   return REQUEST_CONFIRMATIONS;\\r\\n }\\r\\n function getInterval () public view returns(uint256){\\r\\n   return i_interval;\\r\\n }\\r\\n function getLatestTimeStamp() public view returns(uint256) {\\r\\n  return s_lastTimeStamp;\\r\\n }\\r\\n}\",\"keccak256\":\"0x26a9e913d603a27834e07d6a11a4c4987a13f7f15ce047dc9d3b7028021b7289\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a1e38038062001a1e8339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600260006101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426001819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051611630620003ee600039600081816108d9015261096f0152600061073401526000610711015260006106f00152600081816106b401526109d401526000818161038801526104850152600081816103c5015261041901526116306000f3fe6080604052600436106100e85760003560e01c8063473f1ddc1161008a57806391ad27b41161005957806391ad27b4146102c6578063ae771f6b146102f1578063aebc45501461032e578063fd6673f514610359576100e8565b8063473f1ddc1461020757806353a2c19a146102325780635f1b0fd81461025d5780636e04ff0d14610288576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063460e2049146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610384565b60405161010f91906111d3565b60405180910390f35b34801561012457600080fd5b5061012d6103ac565b60405161013a91906111b8565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610f58565b6103c3565b005b610174610483565b005b34801561018257600080fd5b5061018b6105f2565b60405161019891906111d3565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610e68565b6105fc565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190610efe565b6107fc565b6040516101fe91906110bb565b60405180910390f35b34801561021357600080fd5b5061021c610843565b60405161022991906110bb565b60405180910390f35b34801561023e57600080fd5b5061024761086d565b6040516102549190611225565b60405180910390f35b34801561026957600080fd5b50610272610876565b60405161027f91906111d3565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190610eb5565b610883565b6040516102bd92919061111a565b60405180910390f35b3480156102d257600080fd5b506102db61096b565b6040516102e891906111d3565b60405180910390f35b3480156102fd57600080fd5b5061031860048036038101906103139190610efe565b610993565b60405161032591906110d6565b60405180910390f35b34801561033a57600080fd5b506103436109d2565b604051610350919061119d565b60405180910390f35b34801561036557600080fd5b5061036e6109f6565b60405161037b91906111d3565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161046c9291906110f1565b60405180910390fd5b61047f8282610a02565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104dd576040517f53909cba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104f1576104f0611510565b5b600260009054906101000a900460ff16600181111561051357610512611510565b5b1461054a576040517f9a41a9f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b6000600154905090565b600061061660405180602001604052806000815250610883565b509050806106855747600080549050600260009054906101000a900460ff16600181111561064757610646611510565b5b6040517f6acd5de900000000000000000000000000000000000000000000000000000000815260040161067c939291906111ee565b60405180910390fd5b6001600260006101000a81548160ff021916908360018111156106ab576106aa611510565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161077595949392919061114a565b602060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190610f2b565b9050807fe0abfa81226f1e2ce09ba287cbb4c241e89b2b891a389274bb7d9c46e344daf060405160405180910390a250505050565b60008082815481106108115761081061153f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b6000600361ffff16905090565b600060606000600260009054906101000a900460ff1660018111156108ab576108aa611510565b5b600060018111156108bf576108be611510565b5b1490506000806000805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006001544261090691906112e9565b1190508380156109135750825b801561091c5750815b80156109255750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600081815481106109a357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008080549050905090565b6000808054905082600081518110610a1d57610a1c61153f565b5b6020026020010151610a2f9190611481565b90506000808281548110610a4657610a4561153f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610acf57610ace61156e565b5b604051908082528060200260200182016040528015610afd5781602001602082028036833780820191505090505b5060009080519060200190610b13929190610c33565b506000600260006101000a81548160ff02191690836001811115610b3a57610b39611510565b5b02179055504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b6c906110a6565b60006040518083038185875af1925050503d8060008114610ba9576040519150601f19603f3d011682016040523d82523d6000602084013e610bae565b606091505b5050905080610be9576040517f835b702e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb858f78c6ef3de6c040cd394535543e98132bc3c33d1e98398f4f878915b6ba960405160405180910390a25050505050565b828054828255906000526020600020908101928215610cac579160200282015b82811115610cab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c53565b5b509050610cb99190610cbd565b5090565b5b80821115610cd6576000816000905550600101610cbe565b5090565b6000610ced610ce884611265565b611240565b90508083825260208201905082856020860282011115610d1057610d0f6115a7565b5b60005b85811015610d405781610d268882610e3e565b845260208401935060208301925050600181019050610d13565b5050509392505050565b6000610d5d610d5884611291565b611240565b905082815260208101848484011115610d7957610d786115ac565b5b610d8484828561140e565b509392505050565b600082601f830112610da157610da06115a2565b5b8135610db1848260208601610cda565b91505092915050565b60008083601f840112610dd057610dcf6115a2565b5b8235905067ffffffffffffffff811115610ded57610dec61159d565b5b602083019150836001820283011115610e0957610e086115a7565b5b9250929050565b600082601f830112610e2557610e246115a2565b5b8135610e35848260208601610d4a565b91505092915050565b600081359050610e4d816115e3565b92915050565b600081519050610e62816115e3565b92915050565b60008060208385031215610e7f57610e7e6115b6565b5b600083013567ffffffffffffffff811115610e9d57610e9c6115b1565b5b610ea985828601610dba565b92509250509250929050565b600060208284031215610ecb57610eca6115b6565b5b600082013567ffffffffffffffff811115610ee957610ee86115b1565b5b610ef584828501610e10565b91505092915050565b600060208284031215610f1457610f136115b6565b5b6000610f2284828501610e3e565b91505092915050565b600060208284031215610f4157610f406115b6565b5b6000610f4f84828501610e53565b91505092915050565b60008060408385031215610f6f57610f6e6115b6565b5b6000610f7d85828601610e3e565b925050602083013567ffffffffffffffff811115610f9e57610f9d6115b1565b5b610faa85828601610d8c565b9150509250929050565b610fbd8161132f565b82525050565b610fcc8161131d565b82525050565b610fdb81611341565b82525050565b610fea8161134d565b82525050565b6000610ffb826112c2565b61100581856112cd565b935061101581856020860161141d565b61101e816115bb565b840191505092915050565b611032816113c6565b82525050565b611041816113d8565b82525050565b60006110546000836112de565b915061105f826115cc565b600082019050919050565b6110738161136a565b82525050565b61108281611398565b82525050565b611091816113a2565b82525050565b6110a0816113b2565b82525050565b60006110b182611047565b9150819050919050565b60006020820190506110d06000830184610fc3565b92915050565b60006020820190506110eb6000830184610fb4565b92915050565b60006040820190506111066000830185610fc3565b6111136020830184610fc3565b9392505050565b600060408201905061112f6000830185610fd2565b81810360208301526111418184610ff0565b90509392505050565b600060a08201905061115f6000830188610fe1565b61116c6020830187611097565b611179604083018661106a565b6111866060830185611088565b6111936080830184611088565b9695505050505050565b60006020820190506111b26000830184611029565b92915050565b60006020820190506111cd6000830184611038565b92915050565b60006020820190506111e86000830184611079565b92915050565b60006060820190506112036000830186611079565b6112106020830185611079565b61121d6040830184611079565b949350505050565b600060208201905061123a6000830184611088565b92915050565b600061124a61125b565b90506112568282611450565b919050565b6000604051905090565b600067ffffffffffffffff8211156112805761127f61156e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112ac576112ab61156e565b5b6112b5826115bb565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112f482611398565b91506112ff83611398565b925082821015611312576113116114b2565b5b828203905092915050565b600061132882611378565b9050919050565b600061133a82611378565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611365826115cf565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113d1826113ea565b9050919050565b60006113e382611357565b9050919050565b60006113f5826113fc565b9050919050565b600061140782611378565b9050919050565b82818337600083830152505050565b60005b8381101561143b578082015181840152602081019050611420565b8381111561144a576000848401525b50505050565b611459826115bb565b810181811067ffffffffffffffff821117156114785761147761156e565b5b80604052505050565b600061148c82611398565b915061149783611398565b9250826114a7576114a66114e1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115e0576115df611510565b5b50565b6115ec81611398565b81146115f757600080fd5b5056fea26469706673582212201a36a9e48089f5a25101bc75af7a73b37ef5dfe952be40bd77aed35a1f43d45364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063473f1ddc1161008a57806391ad27b41161005957806391ad27b4146102c6578063ae771f6b146102f1578063aebc45501461032e578063fd6673f514610359576100e8565b8063473f1ddc1461020757806353a2c19a146102325780635f1b0fd81461025d5780636e04ff0d14610288576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063460e2049146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610384565b60405161010f91906111d3565b60405180910390f35b34801561012457600080fd5b5061012d6103ac565b60405161013a91906111b8565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610f58565b6103c3565b005b610174610483565b005b34801561018257600080fd5b5061018b6105f2565b60405161019891906111d3565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610e68565b6105fc565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190610efe565b6107fc565b6040516101fe91906110bb565b60405180910390f35b34801561021357600080fd5b5061021c610843565b60405161022991906110bb565b60405180910390f35b34801561023e57600080fd5b5061024761086d565b6040516102549190611225565b60405180910390f35b34801561026957600080fd5b50610272610876565b60405161027f91906111d3565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190610eb5565b610883565b6040516102bd92919061111a565b60405180910390f35b3480156102d257600080fd5b506102db61096b565b6040516102e891906111d3565b60405180910390f35b3480156102fd57600080fd5b5061031860048036038101906103139190610efe565b610993565b60405161032591906110d6565b60405180910390f35b34801561033a57600080fd5b506103436109d2565b604051610350919061119d565b60405180910390f35b34801561036557600080fd5b5061036e6109f6565b60405161037b91906111d3565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161046c9291906110f1565b60405180910390fd5b61047f8282610a02565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104dd576040517f53909cba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104f1576104f0611510565b5b600260009054906101000a900460ff16600181111561051357610512611510565b5b1461054a576040517f9a41a9f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b6000600154905090565b600061061660405180602001604052806000815250610883565b509050806106855747600080549050600260009054906101000a900460ff16600181111561064757610646611510565b5b6040517f6acd5de900000000000000000000000000000000000000000000000000000000815260040161067c939291906111ee565b60405180910390fd5b6001600260006101000a81548160ff021916908360018111156106ab576106aa611510565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161077595949392919061114a565b602060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190610f2b565b9050807fe0abfa81226f1e2ce09ba287cbb4c241e89b2b891a389274bb7d9c46e344daf060405160405180910390a250505050565b60008082815481106108115761081061153f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b6000600361ffff16905090565b600060606000600260009054906101000a900460ff1660018111156108ab576108aa611510565b5b600060018111156108bf576108be611510565b5b1490506000806000805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006001544261090691906112e9565b1190508380156109135750825b801561091c5750815b80156109255750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600081815481106109a357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008080549050905090565b6000808054905082600081518110610a1d57610a1c61153f565b5b6020026020010151610a2f9190611481565b90506000808281548110610a4657610a4561153f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610acf57610ace61156e565b5b604051908082528060200260200182016040528015610afd5781602001602082028036833780820191505090505b5060009080519060200190610b13929190610c33565b506000600260006101000a81548160ff02191690836001811115610b3a57610b39611510565b5b02179055504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b6c906110a6565b60006040518083038185875af1925050503d8060008114610ba9576040519150601f19603f3d011682016040523d82523d6000602084013e610bae565b606091505b5050905080610be9576040517f835b702e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb858f78c6ef3de6c040cd394535543e98132bc3c33d1e98398f4f878915b6ba960405160405180910390a25050505050565b828054828255906000526020600020908101928215610cac579160200282015b82811115610cab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c53565b5b509050610cb99190610cbd565b5090565b5b80821115610cd6576000816000905550600101610cbe565b5090565b6000610ced610ce884611265565b611240565b90508083825260208201905082856020860282011115610d1057610d0f6115a7565b5b60005b85811015610d405781610d268882610e3e565b845260208401935060208301925050600181019050610d13565b5050509392505050565b6000610d5d610d5884611291565b611240565b905082815260208101848484011115610d7957610d786115ac565b5b610d8484828561140e565b509392505050565b600082601f830112610da157610da06115a2565b5b8135610db1848260208601610cda565b91505092915050565b60008083601f840112610dd057610dcf6115a2565b5b8235905067ffffffffffffffff811115610ded57610dec61159d565b5b602083019150836001820283011115610e0957610e086115a7565b5b9250929050565b600082601f830112610e2557610e246115a2565b5b8135610e35848260208601610d4a565b91505092915050565b600081359050610e4d816115e3565b92915050565b600081519050610e62816115e3565b92915050565b60008060208385031215610e7f57610e7e6115b6565b5b600083013567ffffffffffffffff811115610e9d57610e9c6115b1565b5b610ea985828601610dba565b92509250509250929050565b600060208284031215610ecb57610eca6115b6565b5b600082013567ffffffffffffffff811115610ee957610ee86115b1565b5b610ef584828501610e10565b91505092915050565b600060208284031215610f1457610f136115b6565b5b6000610f2284828501610e3e565b91505092915050565b600060208284031215610f4157610f406115b6565b5b6000610f4f84828501610e53565b91505092915050565b60008060408385031215610f6f57610f6e6115b6565b5b6000610f7d85828601610e3e565b925050602083013567ffffffffffffffff811115610f9e57610f9d6115b1565b5b610faa85828601610d8c565b9150509250929050565b610fbd8161132f565b82525050565b610fcc8161131d565b82525050565b610fdb81611341565b82525050565b610fea8161134d565b82525050565b6000610ffb826112c2565b61100581856112cd565b935061101581856020860161141d565b61101e816115bb565b840191505092915050565b611032816113c6565b82525050565b611041816113d8565b82525050565b60006110546000836112de565b915061105f826115cc565b600082019050919050565b6110738161136a565b82525050565b61108281611398565b82525050565b611091816113a2565b82525050565b6110a0816113b2565b82525050565b60006110b182611047565b9150819050919050565b60006020820190506110d06000830184610fc3565b92915050565b60006020820190506110eb6000830184610fb4565b92915050565b60006040820190506111066000830185610fc3565b6111136020830184610fc3565b9392505050565b600060408201905061112f6000830185610fd2565b81810360208301526111418184610ff0565b90509392505050565b600060a08201905061115f6000830188610fe1565b61116c6020830187611097565b611179604083018661106a565b6111866060830185611088565b6111936080830184611088565b9695505050505050565b60006020820190506111b26000830184611029565b92915050565b60006020820190506111cd6000830184611038565b92915050565b60006020820190506111e86000830184611079565b92915050565b60006060820190506112036000830186611079565b6112106020830185611079565b61121d6040830184611079565b949350505050565b600060208201905061123a6000830184611088565b92915050565b600061124a61125b565b90506112568282611450565b919050565b6000604051905090565b600067ffffffffffffffff8211156112805761127f61156e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112ac576112ab61156e565b5b6112b5826115bb565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112f482611398565b91506112ff83611398565b925082821015611312576113116114b2565b5b828203905092915050565b600061132882611378565b9050919050565b600061133a82611378565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611365826115cf565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113d1826113ea565b9050919050565b60006113e382611357565b9050919050565b60006113f5826113fc565b9050919050565b600061140782611378565b9050919050565b82818337600083830152505050565b60005b8381101561143b578082015181840152602081019050611420565b8381111561144a576000848401525b50505050565b611459826115bb565b810181811067ffffffffffffffff821117156114785761147761156e565b5b80604052505050565b600061148c82611398565b915061149783611398565b9250826114a7576114a66114e1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115e0576115df611510565b5b50565b6115ec81611398565b81146115f757600080fd5b5056fea26469706673582212201a36a9e48089f5a25101bc75af7a73b37ef5dfe952be40bd77aed35a1f43d45364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 242,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 264,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(RaffleState)237"
      },
      {
        "astId": 278,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)237": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}